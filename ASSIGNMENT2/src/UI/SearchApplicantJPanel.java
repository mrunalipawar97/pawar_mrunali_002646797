/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import Model.Applicant;
import Model.ApplicantsDirectory;
import Model.Business;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mrunalipawar
 */
public class SearchApplicantJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchApplicantJPanel
     */
    
    public Business business;
    DefaultTableModel applicantTableModel;
    public SearchApplicantJPanel() {
        initComponents();
    }

    public SearchApplicantJPanel(Business business) {
        initComponents();
        this.business = business;
        this.applicantTableModel = (DefaultTableModel) applicantTable.getModel();
        //display the owner details
        displayApplicantDetails();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        IdSearchTextField = new javax.swing.JTextField();
        searchByIDButton = new javax.swing.JButton();
        searchByNameButton = new javax.swing.JButton();
        nameSearchTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        applicantTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(IdSearchTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 110, 40));

        searchByIDButton.setFont(new java.awt.Font("Kannada MN", 1, 13)); // NOI18N
        searchByIDButton.setText("SEARCH by ID");
        searchByIDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByIDButtonActionPerformed(evt);
            }
        });
        add(searchByIDButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 80, 170, 40));

        searchByNameButton.setFont(new java.awt.Font("Kannada MN", 1, 13)); // NOI18N
        searchByNameButton.setText("SEARCH by NAME");
        searchByNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByNameButtonActionPerformed(evt);
            }
        });
        add(searchByNameButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 140, 180, 40));
        add(nameSearchTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 140, 110, 40));

        applicantTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "App ID", "First Name", "Last Name", "Date", "Pet Name", "Pet Age", "Pet Gender", "Pet Type", "Pet Breed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(applicantTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 650, 230));
    }// </editor-fold>//GEN-END:initComponents

    private void searchByNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByNameButtonActionPerformed
        // TODO add your handling code here:
        if(!nameSearchTextField.getText().isEmpty()) {
            String searchName = nameSearchTextField.getText();

            List<Integer> matchingRows = new ArrayList<Integer>();
            for (int row = 0; row < applicantTableModel.getRowCount(); row++) {
                String name = (String) applicantTableModel.getValueAt(row, 1);
                if (name.equalsIgnoreCase(searchName)) {
                    matchingRows.add(row);
                }
            }
            if (matchingRows.size() > 0) {
                String message = "Matching applicants:\n";
                for (Integer row : matchingRows) {
                    message += "\n" + " ( " + applicantTableModel.getValueAt(row, 0) + "," + applicantTableModel.getValueAt(row, 1) + ", " + applicantTableModel.getValueAt(row, 2)+ ") ";
                }
                JOptionPane.showMessageDialog(this, message);
            } else {
                JOptionPane.showMessageDialog(this, "No matching applicants found.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please add first name to search");
        }
    }//GEN-LAST:event_searchByNameButtonActionPerformed

    private void searchByIDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByIDButtonActionPerformed
        // TODO add your handling code here:
        if(!IdSearchTextField.getText().isEmpty()) {
            int idToFind = Integer.valueOf(IdSearchTextField.getText());
            
            List<Integer> matchingRows = new ArrayList<Integer>();
            for (int row = 0; row < applicantTableModel.getRowCount(); row++) {
                int idInRow = (int) applicantTableModel.getValueAt(row, 0);
                if (idInRow == idToFind) {
                    matchingRows.add(row);
                }
            }
            if (matchingRows.size() > 0) {
                String message = "Matching applicants with IDs :\n";
                for (Integer row : matchingRows) {
                    message += "\n" + " ( " + applicantTableModel.getValueAt(row, 0) + "," + applicantTableModel.getValueAt(row, 1) + ", " + applicantTableModel.getValueAt(row, 2)+ ") ";
                }
                JOptionPane.showMessageDialog(this, message);
            } else {
                JOptionPane.showMessageDialog(this, "No matching applicants found.");
            }
            
            /*for (int row = 0; row < applicantTableModel.getRowCount(); row++) {
                    int idInRow = (int) applicantTableModel.getValueAt(row, 0);
                    if (idInRow == idToFind) {
                        applicantTable.setRowSelectionInterval(row, row);
                        JOptionPane.showMessageDialog(null, "Record Found in a Table");
                        break;
                    }
            }*/
        }else {
            JOptionPane.showMessageDialog(this, "Please enter the ID to search");
        }
    }//GEN-LAST:event_searchByIDButtonActionPerformed

    public void displayApplicantDetails() {
         
        ApplicantsDirectory appDirectory  = this.business.getAppDirectory();
       
        applicantTableModel.setRowCount(0);
       
        if (!appDirectory.getApplicantsDirectory().isEmpty()) {
            //display
            for(Applicant a: appDirectory.getApplicantsDirectory()) {
               //number of columns in the table = 9
               Object row[] = new Object[9];
               
               row[0] = a.getApplicationId();
               //row[0] = a.getApplicationId();
               row[1] = a.getFirstName();
               row[2] = a.getLastName();
               row[3] = a.getDate();
               row[4] = a.getPetDetails().getPetName();
               row[5] = a.getPetDetails().getAge();
               row[6] = a.getPetDetails().getGender();
               row[7] = a.getPetDetails().getPetType();
               row[8] = a.getPetDetails().getBreed();
              
               //add row to the table
               this.applicantTableModel.addRow(row);
               System.out.println(a.getApplicationId());
            }
        }
        else{
           System.out.println("Empty list");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IdSearchTextField;
    private javax.swing.JTable applicantTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameSearchTextField;
    private javax.swing.JButton searchByIDButton;
    private javax.swing.JButton searchByNameButton;
    // End of variables declaration//GEN-END:variables
}
